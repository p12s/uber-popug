{
	"info": {
		"_postman_id": "5ed4ff31-6f9e-4581-9a48-cc01a03c0cc5",
		"name": "12.1 uber-popug-auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Health Ok\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json()",
							"pm.test(\"And return OK\", () => {",
							"    pm.expect(response.service).to.eql(\"auth\");",
							"    pm.expect(response.status).to.eql(\"OK\");",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/health",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"requestJson = JSON.parse(pm.request.body.raw)",
							"pm.collectionVariables.set(\"username\", requestJson.username);",
							"pm.collectionVariables.set(\"name\", requestJson.name);",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"SignUp Ok\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json()",
							"pm.test(\"And return created user id\", () => {",
							"    isNumber = Number.isInteger(response.id)",
							"    pm.expect(isNumber).to.be.true",
							"",
							"    pm.collectionVariables.set(\"created_account_id\", response.id);",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"username\" : \"{{$randomUserName}}\",\n\t\"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/sign-up",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignIn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"SignIn Ok\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json()",
							"pm.test(\"Returned token is not empty\", () => {",
							"    pm.expect(response.token).not.eq(\"\");",
							"})",
							"pm.collectionVariables.set(\"token\", response.token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/sign-in",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Token Ok\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json()",
							"pm.test(\"Returned account data is not empty\", () => {",
							"    pm.expect(response.id).to.eql(pm.collectionVariables.get(\"created_account_id\"));",
							"    pm.expect(response.name).to.eql(pm.collectionVariables.get(\"name\"));",
							"    pm.expect(response.username).to.eql(pm.collectionVariables.get(\"username\"));",
							"})",
							"pm.collectionVariables.set(\"public_id\", response.public_id);",
							"pm.collectionVariables.set(\"role\", response.role);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/token",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"requestJson = JSON.parse(pm.request.body.raw)",
							"pm.collectionVariables.set(\"role\", requestJson.role);",
							"pm.collectionVariables.set(\"password\", requestJson.password);",
							"pm.collectionVariables.set(\"name\", requestJson.name);",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Update account Ok\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"public_id\": \"{{public_id}}\",\n    \"name\": \"Ivan New\",\n    \"password\": \"new-qwerty\",\n    \"role\": 3\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/account",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Delete account Ok\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.collectionVariables.set(\"name\", \"\");",
							"pm.collectionVariables.set(\"username\", \"\");",
							"pm.collectionVariables.set(\"password\", \"qwerty\");",
							"pm.collectionVariables.set(\"created_account_id\", 0);",
							"pm.collectionVariables.set(\"public_id\", \"\");",
							"pm.collectionVariables.set(\"token\", \"\");",
							"pm.collectionVariables.set(\"role\", 0);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"public_id\": \"{{public_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/account",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"account"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http"
		},
		{
			"key": "host",
			"value": "localhost"
		},
		{
			"key": "port",
			"value": "8001"
		},
		{
			"key": "name",
			"value": "---"
		},
		{
			"key": "username",
			"value": "---"
		},
		{
			"key": "password",
			"value": "qwerty"
		},
		{
			"key": "created_account_id",
			"value": "---"
		},
		{
			"key": "token",
			"value": "---"
		},
		{
			"key": "public_id",
			"value": "---"
		},
		{
			"key": "role",
			"value": "0"
		}
	]
}